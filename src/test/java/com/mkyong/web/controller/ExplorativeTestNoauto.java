package com.mkyong.web.controller;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;
import org.springframework.core.io.Resource;
import org.springframework.web.context.support.ServletContextResource;
import static org.springframework.web.servlet.resource.ILoveProtectedAccess.forceCallGetResource;
import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;

public class ExplorativeTestNoauto {

    private final ResourceHttpRequestHandler handler = new ResourceHttpRequestHandler();
    private final Resource resource = new ServletContextResource(new AllResourcesExistAndReadableFakeContext(), "/resources/theme1/");

    @Before
    public void setup() {
        handler.setLocations(Arrays.asList(resource));
    }

    @Test
    public void processPath() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("/foo/bar")));
    }

    @Test
    public void processPath1() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("/foo/bar")));
    }

    @Test
    public void processPath2() throws Exception {
        assertEquals("foo/bar", forceCallGetResource(handler, new DummyAttrRequest("foo/bar")));
    }

    @Test
    public void processPath3() throws Exception {
        // leading whitespace control characters (00-1F)
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("  /foo/bar")));
    }

    @Test
    public void processPath4() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 1 + "/foo/bar")));
        // 400 Illegal character (jetty?)
    }

    @Test
    public void processPath5() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 31 + "/foo/bar")));
        // 400 Illegal character (jetty?)
    }

    @Test
    public void processPath6() throws Exception {
        assertEquals("foo/bar", forceCallGetResource(handler, new DummyAttrRequest("  foo/bar")));
        // 400 unknown version (foo/bar is treated as the version string lol)
    }

    @Test
    public void processPath7() throws Exception {
        assertEquals("foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 31 + "foo/bar")));
        // 400 Illegal character (jetty?)
    }

    @Test
    public void processPath8() throws Exception {
        // leading control character 0x7F (DEL)
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 127 + "/foo/bar")));
        // this goes through but apparently not interpreted when resolving paths?
    }

    @Test
    public void processPath9() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 127 + "/foo/bar")));
    }

    @Test
    public void processPath10() throws Exception {
        // leading control and '/' characters
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("  /  foo/bar")));
    }

    @Test
    public void processPath11() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("  /  /  foo/bar")));
    }

    @Test
    public void processPath12() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest("  // /// ////  foo/bar")));
    }

    @Test
    public void processPath13() throws Exception {
        assertEquals("/foo/bar", forceCallGetResource(handler, new DummyAttrRequest((char) 1 + " / " + (char) 127 + " // foo/bar")));
    }

    @Test
    public void processPath14() throws Exception {
        // root ot empty path
    }

    @Test
    public void processPath15() throws Exception {
        assertEquals("", forceCallGetResource(handler, new DummyAttrRequest("   ")));
    }

    @Test
    public void processPath16() throws Exception {
        assertEquals("/", forceCallGetResource(handler, new DummyAttrRequest("/")));
    }

    @Test
    public void processPath17() throws Exception {
        assertEquals("/", forceCallGetResource(handler, new DummyAttrRequest("///")));
    }

    @Test
    public void processPath18() throws Exception {
        assertEquals("/", forceCallGetResource(handler, new DummyAttrRequest("/ /   / ")));

    }

    public static class DummyAttrRequest extends FailingRequest {

        private final String attr;

        public DummyAttrRequest(String attr) {
            this.attr = attr;
        }

        @Override
        public Object getAttribute(String string) {
            return attr;
        }

    }

    public static class AllResourcesExistAndReadableFakeContext extends FailingServletContext {

        @Override
        public InputStream getResourceAsStream(String string) {
            //anything that closes w/o error is fine
            return new ByteArrayInputStream(new byte[]{});
        }

        @Override
        public URL getResource(String string) throws MalformedURLException {
            //anything notnull is fine
            return new URL("file:///");
        }

    }
}
